{{ 'section-evenflo-search.css' | asset_url | stylesheet_tag }}

<div class="search-main-block">
  <div class="search-block page-width">
    <div class="search-heading">
      <h1>Search</h1>
    </div>
    <div class="search-input searchBox-wrapper">
      <svg xmlns="http://www.w3.org/2000/svg" width="19" height="19" viewBox="0 0 19 19" fill="none">
        <path d="M12.9375 7.5625C12.9375 5.55859 11.8477 3.73047 10.125 2.71094C8.36719 1.69141 6.22266 1.69141 4.5 2.71094C2.74219 3.73047 1.6875 5.55859 1.6875 7.5625C1.6875 9.60156 2.74219 11.4297 4.5 12.4492C6.22266 13.4688 8.36719 13.4688 10.125 12.4492C11.8477 11.4297 12.9375 9.60156 12.9375 7.5625ZM11.8477 13.3281C10.582 14.3125 9 14.875 7.3125 14.875C3.26953 14.875 0 11.6055 0 7.5625C0 3.55469 3.26953 0.25 7.3125 0.25C11.3203 0.25 14.625 3.55469 14.625 7.5625C14.625 9.28516 14.0273 10.8672 13.043 12.1328L17.7539 16.8086C18.0703 17.1602 18.0703 17.6875 17.7539 18.0039C17.4023 18.3555 16.875 18.3555 16.5586 18.0039L11.8477 13.3281Z" fill="#121212" fill-opacity="0.5"/>
      </svg>
      <input type="text" id="searchBox" placeholder="Search">
    </div>
    <div class="search-listing-wrapper">
      <div class="search-listing-header">
        {% comment %} TO be displayed through Javascript {% endcomment %}
        <p id="numberOfResults"></p>
        <div class="search-selector">
          <select>
            <option selected="" value="Select Product">Select Product</option>
            <option value="volvo">Volvo</option>
            <option value="saab">Saab</option>
            <option value="mercedes">Mercedes</option>
            <option value="audi">Audi</option>
          </select>
        </div>
        <div class="search-selector">
          <select>
            <option selected="" value="Select Topic">Select Topic</option>
            <option value="volvo">Volvo</option>
            <option value="saab">Saab</option>
            <option value="mercedes">Mercedes</option>
            <option value="audi">Audi</option>
          </select>
        </div>
      </div>

      <div class="search-listing-body">
        {% comment %} TO be displayed through javascript {% endcomment %}
      </div>
    </div>

    <div class="search-pagination" id="searchPagination"></div>
  </div>
</div>

<script>


function fetchFAQsData(searchTerm="",page=1) {
    const container = document.querySelector('.search-listing-body');
    const searchBlocks = document.getElementById('searchBlocks');
    let blocksToShow = searchBlocks ? searchBlocks.dataset.searchBlocksToShow : 8;

    if(!container){
        return;
        }
    
    container.innerHTML = "";  // Clear existing content

      //Creating loader div through javascript
      const loader = document.createElement('div');
      loader.id = 'loader';
      loader.className = 'loader';

      container.appendChild(loader);
   
      if (loader) {
        loader.style.display = 'block';
      }

  fetch(evenFloFAQURL + 'faqs/getFilteredFaqs?page='+page+'&count=10&filter='+encodeURIComponent(searchTerm))
    .then(response => response.json())
    .then(data => {
        console.log('data',data)
        //Setting number of results shown   
        let numberOfResults=data?.count ?? 0
        let paginatedHTML=getPaginatedHTMLButtons(numberOfResults,page)
        let insideContent=`${numberOfResults} results for <b>“${searchTerm}”</b>`
        document.getElementById('numberOfResults').innerHTML=insideContent;

        data?.results?.forEach((product) => {
          const searchCard = document.createElement('div');
          searchCard.classList.add('search-card');

          let productsContent = "";
          let tags = [];
          let tagsHtml = "";
          
          product?.products.forEach((nestedProduct) => { 
            productsContent += `<span>${nestedProduct?.name}</span>`;
          });

         //Added for tags
          product?.tags.forEach((tag) => { 
            tags[tag?.id] = tag?.name;
          });

          const uniquetagsArray = tags?.filter((value, index, self) => self.indexOf(value) === index);
          uniquetagsArray?.forEach((tag, id) => {
            tagsHtml += `<a href="https://abc.com/${tag}">${tag}</a>`;
          });

          searchCard.innerHTML = `
           
            <div class="heading">
              <h3>${product?.products[0]?.name}</h3>
              <h2>${product.question}</h2>
              <div class="description-wrapper">
                <p>${productsContent}</p>
                <button>
                  <span>Show more</span>
                  <svg aria-hidden="true" focusable="false" class="icon icon-caret" viewBox="0 0 10 6">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z" fill="currentColor"></path>
                  </svg>
                </button>
              </div>
            </div>
            <div class="card-content">
              <div class="card-detail-wrapper">
                <p>${product.answer}</p>
              </div>
              <div class="card-link-wrapper">
                ${tagsHtml}
              </div>
            </div>
          `;
          container.appendChild(searchCard);
        });
      
    })
    .catch(error => {
      console.error('Error fetching products:', error);
    })
    .finally(() => {
      // Hide the loader
      if (loader) {
        loader.style.display = 'none';
           document
	.querySelectorAll(".description-wrapper button")
	.forEach((descBtn, index) => {
		let description = document.querySelectorAll(".description-wrapper p")[
			index
		];

		description.setAttribute("data-full-text", description.textContent);

		if (description.textContent.length > 50) {
			description.textContent =
				description.textContent.substring(0, 50) + "...";
		}

		descBtn.addEventListener("click", () => {
			document.querySelectorAll(".description-wrapper p").forEach((desc) => {
				let fullText = desc.getAttribute("data-full-text");
				if (fullText && fullText.length > 50) {
					desc.textContent = fullText.substring(0, 50) + "...";
				}
			});

			document
				.querySelectorAll(".description-wrapper button.active")
				.forEach((activeBtn) => {
					activeBtn.classList.remove("active");
                  activeBtn.children[0].textContent = "Show more"
				});

			descBtn.classList.add("active");
            descBtn.children[0].textContent = "Show less";
			description.textContent = description.getAttribute("data-full-text");
		});
	});
      }
    });
}


function getPaginatedHTMLButtons(resultCount, page) {
    if(resultCount <1){
      return;
    }
    const perPage = 20;
    const totalPages = Math.ceil(resultCount / perPage);
    
    const paginationDiv = document.getElementById('searchPagination');

    // Create the 'prev' button
    const prevButton = document.createElement('button');
    prevButton.textContent = 'prev';
    if (page == 1) {
        prevButton.disabled = true;
    }else{
        prevButton.onclick=()=>paginatedClick(page-1)
    }
    paginationDiv.appendChild(prevButton);

    // Create the page number buttons
    let startPage = Math.max(1, page);
    let endPage = Math.min(startPage + 2, totalPages);

    for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.textContent = i;
        pageButton.onclick=()=>paginatedClick(i)
        paginationDiv.appendChild(pageButton);
    }

    // Create the 'next' button
    const nextButton = document.createElement('button');
    nextButton.textContent = 'next';
    if (page >= totalPages) {
        nextButton.disabled = true;
    }else{
        nextButton.onclick=()=>paginatedClick(page+1)
    }

    paginationDiv.appendChild(nextButton);

    return paginationDiv.outerHTML;
}

function paginatedClick(page){
  const queryString = window.location.search;
  const urlParams = new URLSearchParams(queryString);

    let searchTerm=""
    if (urlParams.has('search')) {
        searchTerm = urlParams.get('search');
    } 

    callLocation(page,searchTerm)

  
}


document.addEventListener('DOMContentLoaded', () => {
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);

    let searchTerm=""
    if (urlParams.has('search')) {
        searchTerm = urlParams.get('search');
        document.getElementById('searchBox').value=searchTerm
    } 

    let page=1
    if (urlParams.has('page')) {
        page = urlParams.get('page');
      
    }

    fetchFAQsData(searchTerm,page);
});


 // Get the input element by its ID
const inputElement = document.getElementById('searchBox');
// Add an event listener for the 'keydown' event
inputElement.addEventListener('keydown', function(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        const searchTerm = inputElement.value;
        callLocation(1,searchTerm)

    }
});

function callLocation(page=1,searchTerm=""){
  window.location.href = '/pages/evenflo-faq-search?page='+page+'&search=' + encodeURIComponent(searchTerm)
}
</script>
